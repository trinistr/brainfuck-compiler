<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>324</x>
      <y>0</y>
      <w>189</w>
      <h>207</h>
    </coordinates>
    <panel_attributes>ProgramConfig
--
- memoryLength: int
- wordSize: RegWidth
- architecture: Arch
- memoryWrapping: Wrap
- useStdlib: boolean
- targetSystem: System
- returnZero: boolean
- functionName: string
- outputFile: string
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.allinone.ActivityDiagramText</type>
    <coordinates>
      <x>36</x>
      <y>0</y>
      <w>210</w>
      <h>341</h>
    </coordinates>
    <panel_attributes>title: BFCompile
Start
Setup ProgamConfig
Define target-dependent\strings and functions
Write prologue
Initalize variables?
-- Parse --
Write epilogue
End

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.allinone.ActivityDiagramText</type>
    <coordinates>
      <x>36</x>
      <y>351</y>
      <w>227</w>
      <h>307</h>
    </coordinates>
    <panel_attributes>title: Write prologue
Start
Define external functions
Export functionName
Setup memory in .bss ..
Setup stackframe
Push and initialize registers
End

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.allinone.ActivityDiagramText</type>
    <coordinates>
      <x>36</x>
      <y>729</y>
      <w>654</w>
      <h>321</h>
    </coordinates>
    <panel_attributes>title: Setup memory in .bss
Start
If
	[memoryWidth=1]
	resb
	
	[memoryWidth=2]
	resw
	
	[memoryWidth=4]
	resd
	
	[memoryWidth=8]
	resq
EndIf
memoryLength
End

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.allinone.ActivityDiagramText</type>
    <coordinates>
      <x>288</x>
      <y>351</y>
      <w>267</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>title: Write epilogue
Start
If
	[returnZero=true]
	*ax = 0

	[else]
EndIf
Pop registers
Leave
End

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>738</x>
      <y>0</y>
      <w>171</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>Used registers
--
eax/rax (don't care)
ebx/rbx
esi/rsi  ABIs are different!
edi/rdi

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>531</x>
      <y>0</y>
      <w>171</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>wordSize
--
4 &amp; 8 can be used only
in 32 xor 64 bit mode
respectively
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>531</x>
      <y>99</y>
      <w>81</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
RegWidth
--
bytes1 =1
bytes2 =2
bytes4 =4
bytes8 =8
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>99</y>
      <w>90</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
Wrap
--
wrap
stop
error</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>738</x>
      <y>99</y>
      <w>90</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
System
--
linux
macos
windows</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>846</x>
      <y>99</y>
      <w>90</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
Arch
--
x86
x86_64</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
